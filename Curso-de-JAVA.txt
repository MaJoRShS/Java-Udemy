Curso de JAVA completo Udemy


Curso ministrado na udemy pelo professor nelio alves.


Seção 1: Introdução

1. Introdução: visão geral do curso

Está apresentando o curso e as principais qualidades que ele julga necessarias para ser um bom dev de JAVA, ainda deixou um arquivo que vai ser utilizado no curso.


Seção 2: Conceitos de programação

2. Visão geral do capítulo

3. Material de apoio do capítulo

Baixei o material de apoio

4. Algoritmo, Automação, Programa de Computador

Algoritmo = Sequencia bem definida de passos a serem seguidas
Automação = processo que pode ser automatizado via uma maquina
Programa = é um Algoritmo executado pelo Computador


5. O que é preciso para se fazer um programa de computador

IDE = uma interface de Desenvolvimento
Compilador = transforma o codigo java em programa de computador


6. Linguagem de programação, léxica, sintática

léxica = a forma de escrever

sintática = é um erro gramatical

programação = é a junção de todas elas mais em uma linguagem de programação.


7. IDE - Ambiente Integrado de Desenvolvimento

Aqui ele está mostrando algumas IDE's e para que serve.


Seção 3: Introdução à linguagem Java

8. Visão geral do capítulo

9. Material de apoio do capítulo


10. Entendendo as versões do Java

LTS - long time suport

ou seja longo suporte pela oracle.


11. Histórico e edições de Java

JAVA é uma linguagem de programação mais também é uma plataforma de Desenvolvimento e execução, ou seja tem que instalar os JDKS e todo o ambiente de desenvolvimento.

O java surgiu para resolver o problema de alocação de memoria e o suporte a varios dispositivos com o mesmo codigo e a mesma aplicação.

JAVA ME  - micro edition = usada para IOT por ser mais leve 

JAVA SE  - Standard Edition = usado para tudo , tem o core do java

JAVA EE  - Enterprise Edition = Aplicações corporativas



12. JDK / JVM - Máquina Virtual do Java

JVM - JAVA VIRTUAL MACHINE

essa aqui é a maquina virtual do java que interpreta e compila o codigo.

aqui ele mostra que o java é uma linguagem que está no meio termo entre as compiladas e as interprestadas, segundo ele o java interpreta o código e já corrige erros na syntax e na semantica e ai gera o byte code, que ja é otimizado, ai sim ele compila o código já performado , na JVM de cada SO e ai roda lindo.


13. Estrutura de uma aplicação Java

Todo código java tem que estar em clases, e essas classes agrupadas são os pacotes(packages), e varios pacotes agrupados foram um modulo, que por sua vez com varios outros modulos agrupados formam um sistema.
Run-time = é a compilação ou build de um determinado grupo de pacotes para serem instalados em algum dispositivo.


14. Instalando Java

Essas aulas eram no Windows, que é nivel macaco e eu já adotei como ambiente de desenvolvimento o LINUX

15. Instalando o Eclipse

Igual a aula anterior


16. Primeiro programa em Java no Eclipse

Aqui ele fala do "workspace" que é o diretório que seus projetos seram salvos, e todas as vezes que o eclipse for inicializado ele vai te perguntar se você quer mudar esse diretório.

outra coisa é a perspectiva, no nosso caso estamos utilizando a JAVA, é só ir em "window > perspective > open perspective > java" caso não tenha vai em "other..." e escolhe o java.

para voltar a perspectiva igual ao padrão vai no mesmo caminho e clica em "reset perspective"

Mostra o console "Window > show view > console"


***
Aqui tem um bizu 

Usando o comando 'sudo alternatives --config java' eu consigo escolher no meu fedora entre quais opçoes do java eu quero usar, das que estão instaladas no PC.


***

criou o primeiro programa em java, mostrou que sou obrigado a criar uma classe para executar qualquer coisa no java e ainda deixou a classe como sendo executavel.

Seção 4: Estrutura sequencial


17. Visão geral do capítulo

18. Material de apoio do capítulo


19. Expressões aritméticas
Aqui ele mostrou os 5 tipos de operadores aritméticos, e mostrou que mesmo em java temos precedencia de execução, como na matematica normal, isso significa que tudo que estiver entre parenteses"()" vai ser executado primeiro.
obs. em programação não existe chaves nem colchetes para expressões aritméticas só os parenteses.


20. Variáveis e tipos básicos em Java

Demonstrou como devem ser declarados os tipos de variavel no java, explicou como são armazenadas na memoria e que toda variavel tem um nome ou identificador, e que possiu um tipo (existem varios ele mostrou apenas os 8 primitivos).

Numericos Inteiros
byte   - 8 bites
short  - 16 bites
int    - 32 bites
long   - 64 bites

Numericos com Ponto flutuante
float   - 32 bites
double  - 64 bites

Caractere Unicode
char - 16 bites

Valor Verdade
boolean - 1 bite

String
Armazena uma cadeia de Caracteres.

Padrão de nomenclatura de variavel
Nunca inicia com numeros , sempre com letras ou _
Não pode ter espaçoes em branco entre o nome da variavel
Não se usa acentuação nem caracater especial
E usa-se o padrão Camel Case, ou seja a primeira letra de cada palavra tem que ser maiuscula.


21. As três operações básicas de programação

Entrada de dados ou escrita = é quando o usuario insere dados por meio de um teclado ou touch

processamento de dados = é o processo que o computador faz com os dados que foram enviados para ele e depois devovlve alguma informação do que foi processado

Saida de dados ou escrita = é o processo de devolução do computador após o processamento para o usuario por meio de um periferico de saida como o monitor.


22. Saída de dados em Java

Para retornar dados para os usuarios temos algumas formas, 

Essa forma não tem uma quebra de linha no final, se eu colocar mais alguma coisa para aparecer na tela ele simplesmente vai escrever tudo junto.
System.out.print("Olá Mundo");


já aqui tem a quebra de linha no final, ou seja fica esse conteúdo e o proximo já estaria na proxima linha.
System.out.println("Olá Mundo");


para imprimir valores de variaveis temos algumas formas
int x = 32;
double y = 10.35784
System.out.println(x);
System.out.println(y);


mais para você poder formatar os valor do double você pode usar o comando 


int x = 32;
double y = 10.35784
System.out.printf("%.2f%n",y);

Aqui o printf é para formatar o numero, e o "%.2f%" é o indicador de que eu só quero duas casas decimais, e o %n serve para quebra de linha na apresentação dos dados, já o proxima valor após a virgula é a variavel que eu quero apresentar formatada.

Aqui ainda tem um esquema na formatação que é para apresentação com "." ou "," por padrão o comando "System.out.printf();" ele pega as configurações do seu computador para usar como padrão por isso aqui ele sempre apresenta com "," e para apresentarmos com "." temos que utilizar uma classe padrão do java que é a "Locale"

import java.util.Locale;
Importa ele no começo do programa.

Locale.setDefault(Locale.US);
Usa ela no começo do programa também porque essas configurações só teram efeito depois da declaração do locale.


Para concatenar mais de um dado de retorno é simples é so mandar o "+" entre os textos e as variaveis assim:
System.out.println("Texto qualquer " + y + " Final do texto qualquer");

já nesse exemplo estou concatenando texto formatado com 2 casas decimais, a unica diferença é que se eu tivesse mais alguma coisa para printar na tela e precisaria de mais alguns "%.N" e ai as variaveis tem que ser colocadas na ordem em que eu defini os %.
System.out.printf("Resultado = %.2f  Metros%n", y);

Aqui temos outro exemplo porém concatenando varios tipos de dados no mesmo retorno, ou seja uma string, um inteiro e um double, e para fazer isso temos algumas marcações no JAVA como por exemplo:

%s = String

%d = Inteiro(int)

%f = Ponto flutuante (double)

%n = Quebra de linha

Obs. Tem que declarar as variaveis no começo do programa.
System.out.println("%s tem %d anos e ganha R$ : %.2f reais %n", nome, idade, renda);


Deixou um exercicio de fixação. 

Obs. Movi todo o repositório do git para dentro do meu workspace do eclipse para que assim eu consiga subir os códigos da aula e dos exercicios de fixação.


23. Processamento de dados em Java, Casting

Aqui ele fala que o processamento de dados em java é igual qualquer outra lingaguem onde você cria uma variavel e ai depois você atribui uma expressão a ela, ou um valor direto.

e que o casting é quando você faz a conversão explisita de tipos de dados.

uma boa pratica de programação é sempre declarar os valores igual ao seu tipo, exemplo valores double sempre com o ".0" e se for float sempre mandar com "f" depois do numero,  "5f".


O casting seria no caso de uma perda de dados ou conversão de tipos de dados entre algum processamento, por exemplo estou somando dois inteiros e quero forçar que o retorno seja um double eu coloco "(double)" antes das variaveis na declaração que ai o compilador intende que deve converter aquele valor para double, e até mesmo no caso de perda de valor se você usar o casting ele aceita, no exemplo de conversão de double para inteiro.



24. Entrada de dados em Java - Parte 1

Aqui ele mostra que os dados que são digitados via teclado tem uma classe que já pega os dados, a Scanner, é só dar aquele importe que tudo funciona, para pegar os dados cada tipo tem um metodo especifico.

declaração do Scanner.

        Scanner sc = new Scanner(System.in);

    String x;
    x = sc.next();

    Inteiro
    int x;
    x = sc.nextInt();

    Double
    double x;
    x = sc.nextDouble();

Aqui tem uma parada, o separador de decimal sempre vai respeitar sua localidade, ou seja BR o separador e "," USA o separador é ".", então se você quiser mudar tem que madar o Locale.

    Locale.setDefault(Locale.US);

    Caracter
    char x;
    x = sc.next().charAt(0);
    Aqui o charAt() vai pegar o caracater que você informar a posição, pode ser o 1 como no exemplo acima mais pode ser qualquer outro.



    Ler varias palavras da mesma linha com tipos diferentes
    string x;
    int y;
    double z;
    x = sc.next();
    y = sc.nextInt();
    z = sc.nextDouble();




25. Entrada de dados em Java - Parte 2

    Scanner sc = new Scanner(System.in);
    String s1, s2, s3;
    s1 = sc.nextLine();
    s2 = sc.nextLine();
    s3 = sc.nextLine();
    System.out.println("DADOS DIGITADOS:");
    System.out.println(s1);
    System.out.println(s2);
    System.out.println(s3);
    sc.close();


Exemplo acima ele vai pegar todo o conteudo até a quebra de linha e por isso se usa o "sc.nextLine();"


Quando você usa um comando de leitura diferente do nextLine() e dá alguma quebra de linha, essa quebra de linha fica "pendente" na entrada padrão.
Se você então fizer um nextLine(), aquela quebra de linha pendente será absorvida pelo nextLine().

Solução:
Faça um nextLine() extra antes de fazer o nextLine() de seu interesse.


    int x;
    String s1, s2, s3;
    x = sc.nextInt();
    s1 = sc.nextLine();
    s2 = sc.nextLine();
    s3 = sc.nextLine();
    System.out.println("DADOS DIGITADOS:");
    System.out.println(x);
    sc.nextLine();
    System.out.println(s1);
    System.out.println(s2);
    System.out.println(s3);


O eclipse deu uma call interessante, ele aqui tranformou o meu objeto "sc" do Scanner em uma variavel statica ou seja eu não vou alterala nem ninguém , e ai eu declaro ele na inicialização do programa e ainda já era, fica tudo certo.


26. Funções matemáticas em Java

Aqui ele está mostrando que existe uma classe em java que é responsavel por calculos matematicos, e que praticamente já está tudo la pronto para uso.

A = Math.sqrt(x);   Variável A recebe a raiz quadrada de x
A = Math.pow(x, y); Variável A recebe o resultado de x elevado a y
A = Math.abs(x);    Variável A recebe o valor absoluto de x

• sqrt – raiz quadrada
• pow – potenciação
• abs – valor absoluto

e que é possivel executar funções complexas com java apenas concatenando esses metodos.



27. AVISO: exercícios para iniciantes PARTE 1

Aqui ele está explicando que tem exercicios propostos em uma aula do youtube e tals e que os questionarios respondidos estão em um repo no github, ai é meio que obrigatório para quem é iniciante na parada e opcional para quem já desenrola na logica de programação.

vou fazer FODA-SE.

28. Exercícios para Iniciantes - PARTE 1

Baixie o conteudo, vou ver o video e mandar os exercicios.


Video do youtube tem um exercicio. [ done ]

Execicos do PDF

acho que vou mandar uma classe por aula, mesmo que fique bastante conteúdo é melhor mais organizado e bem mais facil a consulta depois.


Seção 5: Estrutura condicional

29. Visão geral do capítulo
Deu uma Introdução bem simplista.

30. Material de apoio do capítulo
Download do material do modulo.

31. Expressões comparativas

Aqui ele está mostrando os operadores comparativos igual o da maioria das linguagens
Operador Significado
>        maior
<        menor
>=        maior ou igual
<=        menor ou igual
==        igual
!=        diferente



32. Expressões lógicas

Operador Significado
&&       E
||       OU
!        NÃO


Aqui é o mesmo esquema da logica matematica, e que também tem em toda linguagem de programação, ele nos exemplos não está usando nada de programação só tabela verdade.

    